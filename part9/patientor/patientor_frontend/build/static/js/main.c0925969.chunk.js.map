{"version":3,"sources":["types.ts","constants.ts","state/reducer.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","AddEntryModal/AddEntryForm.tsx","AddEntryModal/index.tsx","OnePatientPage/index.tsx","App.tsx","index.tsx"],"names":["HealthCheckRating","Gender","apiBaseUrl","addEntry","newEntry","type","payload","initialState","patients","diagnoses","Array","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","key","TextField","field","placeholder","style","color","DiagnosisSelection","setFieldValue","setFieldTouched","stateOptions","diagnosis","code","text","Dropdown","fluid","multiple","search","selection","onChange","_event","data","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","a","axios","post","newPatient","console","response","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","patient","id","Cell","to","AddEntryForm","date","specialist","description","diagnosisCodes","discharge","criteria","AddEntryModal","OnePatientPage","useParams","setPatient","setEntries","submitNewEntry","window","alert","useEffect","find","p","get","then","updatePatient","entries","log","sex","HospitalEntryType","entry","Icon","size","OccupationalHealthcareEntryType","sickLeave","TableCell","employerName","startDate","endDate","HealthCheckEntryType","healthCheckRating","EntryDetails","Error","assertNever","i","padding","List","bulleted","Item","d","App","patientListFromApi","fetchPatientList","diagnosisListFromApi","fetchDiagnosisList","Link","primary","Divider","hidden","path","render","ReactDOM","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.c0925969.chunk.js","sourcesContent":["\nexport interface BaseEntry { \n  id: string; \n  date: string; \n  specialist: string; \n  description: string; \n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\n\nexport interface OccupationalHealthCare extends BaseEntry { \n  type: \"OccupationalHealthcare\"; \n  employerName: string; \n  sickLeave?: SickLeave;\n}\n  \nexport interface Discharge { \n  date: string; \n  criteria: string;\n}\n\nexport interface HospitalEntry extends BaseEntry { \n  type: \"Hospital\"; \n  discharge: Discharge;\n}\n\nexport enum HealthCheckRating { \n  \"Healthy\" = 0, \n  \"LowRisk\" = 1, \n  \"HighRisk\" = 2, \n  \"CriticalRisk\" = 3}\n  \nexport interface HealthCheck extends BaseEntry { \n  type: \"HealthCheck\"; \n  healthCheckRating: HealthCheckRating;\n}\n\nexport type Entry = OccupationalHealthCare | HospitalEntry | HealthCheck;\nexport enum Gender {\n  Male = \"male\",\n  Female = \"female\",\n  Other = \"other\"\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n  entries: Entry[];\n}\nexport interface SickLeave { \n  startDate: string; \n  endDate: string;\n}\n","export const apiBaseUrl = 'http://localhost:3001/api';\n","import { State } from './state';\nimport { Patient, Diagnosis, Entry} from '../types';\n\nexport type Action =\n  | {\n      type: \"SET_PATIENT_LIST\";\n      payload: Patient[];\n    }\n  | {\n      type: \"ADD_PATIENT\";\n      payload: Patient;\n    }\n  | {\n      type: \"UPDATE_PATIENT\";\n      payload: Patient;\n    }\n  | {\n      type: \"SET_DIAGNOSES\";\n      payload: Diagnosis[];\n    }\n    | {\n\t\t\ttype: 'ADD_ENTRY';\n\t\t\tpayload: Entry;\n\t  };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_PATIENT_LIST\":\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case \"ADD_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case \"UPDATE_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case \"SET_DIAGNOSES\":\n      return {\n        ...state,\n        diagnoses: action.payload,\n      };\n    case 'ADD_ENTRY':\n        return {\n          ...state,\n          patients: {\n            ...state.patients,\n          },\n        };\n    default:\n      return state;\n  }\n};\n\n\nexport const setPatientList = (list: Patient[]): Action => {\n  return { type: \"SET_PATIENT_LIST\", payload: list };\n};\n\nexport const addPatient = (patient: Patient): Action => {\n  return { type: \"ADD_PATIENT\", payload: patient };\n};\n\nexport const updatePatient = (patient: Patient): Action => {\n  return { type: \"UPDATE_PATIENT\", payload: patient };\n};\n\nexport const setDiagnosisList = (list: Diagnosis[]): Action => {\n  return { type: \"SET_DIAGNOSES\", payload: list};\n};\nexport const addEntry = (newEntry: Entry): Action => {\n\treturn {\n\t\ttype: 'ADD_ENTRY',\n\t\tpayload: newEntry,\n\t};\n};","import React, { createContext, useContext, useReducer } from \"react\";\nimport { Patient, Diagnosis } from \"../types\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  diagnoses: Diagnosis[];\n};\n\nconst initialState: State = {\n  patients: {},\n  diagnoses: new Array<Diagnosis>(),\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Table, Button } from \"semantic-ui-react\";\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\nimport AddPatientModal from \"../AddPatientModal\";\nimport { Patient } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport { useStateValue, addPatient } from \"../state\";\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n    //  dispatch({ type: \"ADD_PATIENT\", payload: newPatient });\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell><Link to = {`/patients/${patient.id}`}> {patient.name}</Link>\n               </Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import React from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { useStateValue } from \"../state\";\nimport { TextField, DiagnosisSelection, NumberField } from \"../AddPatientModal/FormField\";\nimport { Gender, Patient, Entry, HealthCheck, HealthCheckRating, HospitalEntry, OccupationalHealthCare } from \"../types\";\nimport { Grid, Button } from \"semantic-ui-react\";\n\n/*\n * use type Entry, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\n\n\nexport type HospitalEntryFormValues = Omit<HospitalEntry, \"id\">;\nexport type HealthCheckEntryFormValues = Omit<HealthCheck, \"id\">;\nexport type OccupationalHealthCareEntryFormValues = Omit<OccupationalHealthCare, \"id\">\nexport type EntryFormValues = Omit<Entry, \"id\">;\ninterface HospitalProps {\n    onSubmit: (values: HospitalEntryFormValues) => void;\n    onCancel: () => void;\n  }\n\n  \n  export const AddEntryForm: React.FC<HospitalProps> = ({ onSubmit, onCancel }) => {\n    const [{ diagnoses }] = useStateValue();\n    return (\n      <Formik\n        initialValues={{\n            date: \"\",\n            specialist: \"\",\n            description: \"\",\n            diagnosisCodes: [],\n            discharge: {\n                date: \"\",\n                criteria: \"\"\n              },\n            //healthCheckRating: HealthCheckRating.Healthy\n            type: \"Hospital\",\n        }}\n        onSubmit={onSubmit}\n        validate={values => {\n          const requiredError = \"Field is required\";\n          const errors: { [field: string]: string } = {};\n          if (!values.date) {\n            errors.date = requiredError;\n          }\n          if (!values.specialist) {\n            errors.specialist = requiredError;\n          }\n          if (!values.discharge.date || !values.discharge.criteria) {\n            errors.date = requiredError;\n            errors.criteria = requiredError;\n          }\n          if (!values.description) {\n            errors.description = requiredError;\n          }\n          return errors;\n        }}\n      >\n        {({ isValid, dirty, setFieldValue, setFieldTouched  }) => {\n          return (\n            <Form className=\"form ui\">\n             <Field\n                label=\"Type\"\n                placeholder=\"type\"\n                name=\"type\"\n                component={TextField}\n              />\n              <Field\n                label=\"Date\"\n                placeholder=\"YYYY-MM-DD\"\n                name=\"date\"\n                component={TextField}\n              />\n              <Field\n                label=\"Specialist\"\n                placeholder=\"specialist\"\n                name=\"specialist\"\n                component={TextField}\n              />         \n              <Field\n              label=\"Discharge Date\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"discharge.date\"\n              component={TextField}\n            />\n            <Field\n              label=\"Criteria\"\n              placeholder=\"Criteria\"\n              name=\"discharge.criteria\"\n              component={TextField}\n            />\n              <Field\n                label=\"Description\"\n                placeholder=\"Description\"\n                name=\"description\"\n                component={TextField}\n              />     \n               <DiagnosisSelection\n              diagnoses={diagnoses}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            />\n              <Grid>\n                <Grid.Column floated=\"left\" width={5}>\n                  <Button type=\"button\" onClick={onCancel} color=\"red\">\n                    Cancel\n                  </Button>\n                </Grid.Column>\n                <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n                </Grid.Column>\n              </Grid>\n            </Form>\n          );\n        }}\n      </Formik>\n    );\n  };\nexport default AddEntryForm;","import { Modal, Segment } from 'semantic-ui-react';\nimport AddEntryForm, { EntryFormValues, HospitalEntryFormValues, HealthCheckEntryFormValues, OccupationalHealthCareEntryFormValues } from './AddEntryForm';\nimport React, {useState} from 'react';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: HospitalEntryFormValues|HealthCheckEntryFormValues|OccupationalHealthCareEntryFormValues ) => void;\n  error?: string;\n}\n\nconst AddEntryModal = ({ modalOpen, onClose, onSubmit, error }: Props) => {\n    const [ type, setType ] = useState<\"Hospital\" | \"HealthCheck\" | \"OccupationalHealthcare\">(\"Hospital\");\n    \n    \nreturn (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new entry</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddEntryForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n}\n\n\nexport default AddEntryModal;","import axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { Container, Icon, Table, TableCell, List, Segment, Button} from \"semantic-ui-react\";\nimport React, { useState, useEffect } from \"react\";\nimport { EntryFormValues, HospitalEntryFormValues, HealthCheckEntryFormValues,OccupationalHealthCareEntryFormValues  } from \"../AddEntryModal/AddEntryForm\";\nimport AddEntryModal from \"../AddEntryModal\";\nimport { HospitalEntry, Patient, Entry, OccupationalHealthCare, HealthCheck } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport { useStateValue, updatePatient, addEntry } from \"../state\";\n\nconst OnePatientPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n // const [, dispatch] = useStateValue();\n\n const [patient, setPatient] = useState<Patient | null>(null);\n  const [{ patients, diagnoses }, dispatch] = useStateValue();\n  const [error, setError] = React.useState<string | undefined>();\n  const [entries, setEntries] = React.useState<Entry[]>();\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n  const submitNewEntry = async (values: HospitalEntryFormValues|HealthCheckEntryFormValues|OccupationalHealthCareEntryFormValues ) => {\n    try {  \n      if (patient) {\n\n      const { data: newEntry } = await axios.post<Entry>(\n        `${apiBaseUrl}/patients/${patient.id}/entries`,\n        values\n      );\n      closeModal();\n      dispatch(addEntry(newEntry));\n     // dispatch(addEntry(patient, newEntry));\n      }\n  \n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n      window.alert(e.response.data);\n    }\n  };\n  useEffect(() => {\n    const patient = Object.values(patients).find(p => p.id === id);\n    if (patient) {\n      if (!patient.ssn) {\n        axios.get<Patient>(\n          `${apiBaseUrl}/patients/${id}`\n        )\n        .then(response => {\n          dispatch(updatePatient(response.data));\n          setPatient(response.data);\n\n\t\t\t\tsetEntries(response.data.entries);\n        });\n      } else {\n        setPatient(patient);\n      }\n    }\n  }, [patients]);\n \n \n if(patient){  \n  \n   console.log(patient)\n   console.log(patient.entries)\n   console.log(diagnoses)\n  let sex = \"\";\n  switch (patient.gender) {\n      case \"male\":\n          sex = \"man\";\n          break;\n      case \"female\":\n          sex = \"woman\";\n          break;\n      default:\n        sex = \"transgender\";\n          break;\n  }\n\n  const HospitalEntryType: React.FC<{ entry: HospitalEntry }> = ({ entry }) => {\n  return (\n    <Segment>\n      Hospital Entry <Icon className =\"hospital outline icon\"  size=\"large\"/>\n      <Table.Row>Reason for Hospital Discharge : {entry.discharge.criteria} </Table.Row>\n      <Table.Row>Date of Discharge: {entry.discharge.date}</Table.Row>\n    </Segment>\n  );\n  }; \n  const OccupationalHealthcareEntryType: React.FC<{ entry: OccupationalHealthCare}> = ({ entry }) => {\n    if(entry.sickLeave){\n return (\n   <Segment>\n     Occupational Healthcare\n  <Icon className =\"user md icon\"  size=\"large\"/>\n  <TableCell>Employer: {entry.employerName}</TableCell>\n  <TableCell>Sick leave: START: {entry.sickLeave.startDate} END: {entry.sickLeave.endDate}</TableCell>\n  </Segment>\n  );\n    } else {\n      return (\n        <Segment>\n          Occupational Healthcare\n       <Icon className =\"user md icon\"  size=\"large\"/>\n       <Table.Row> Employer: {entry.employerName}</Table.Row>\n       </Segment>\n       );\n    }\n \n\n  };\n  const  HealthCheckEntryType: React.FC<{ entry:  HealthCheck}> = ({ entry }) => {\n    const HealthCheckRating: React.FC<{ entry: HealthCheck }> = ({ entry }) => {\n      switch (entry.healthCheckRating) {\n        case 0:\n          return <Icon color=\"green\" className=\"heart\" />;\n        case 1:\n          return <Icon color=\"yellow\" className=\"heart\" />;\n        case 2:\n          return <Icon color=\"teal\" className=\"heart\" />;\n        case 3:\n          return <Icon color=\"red\" className=\"heart\" />;\n        default:\n          return <div></div>;\n      }\n    };\n return (\n   <Segment>\n     Health Check-up\n  <Icon className =\"stethoscope icon\" size=\"large\"  />\n  <HealthCheckRating entry={entry} />\n </Segment>\n );\n  };\n\n  const EntryDetails: React.FC<{ entry: Entry }> = ({ entry }) => {\n    const assertNever = (value: never): never => {\n      throw new Error(\n        `error, 'value: ${value} not defined`\n      );\n    };\n  \n    switch (entry.type) {\n      case \"Hospital\":\n        return <HospitalEntryType entry={entry} />;\n      case \"OccupationalHealthcare\":\n        return <OccupationalHealthcareEntryType entry={entry} />;\n      case \"HealthCheck\":\n        return <HealthCheckEntryType entry={entry} />;\n      default:\n        return assertNever(entry);\n    }\n  };\n  return (\n    <div>\n      <Container textAlign=\"left\" >\n        <h2>{patient.name} \n       <Icon className={sex}/>\n        </h2>\n        <p>\n        <strong>SSN: </strong> {patient.ssn}\n         </p>\n         <p>\n        <strong>Date of Birth:</strong> {patient.dateOfBirth}\n         </p>\n         <p>\n        <strong>Occupation: </strong> {patient.occupation}\n        </p>\n        <h3>Entries: </h3> \n        <Table celled >\n        <Table.Body>\n      {patient.entries.map((entry,i )=>\n      <Table.Row key={entry.id}>\n        {i + 1}\n       <TableCell style={{ padding: \"10px\" }}> <b>Entry date:</b> {entry.date}   <EntryDetails  entry={entry}/>   </TableCell>  \n      <TableCell> <strong>Description:</strong> {entry.description}</TableCell>  \n       <List bulleted> {entry.diagnosisCodes?.map(code => \n      <List.Item  key = {code} style={{ padding: \"10px\" }}> <b>Diagnosis code: </b>{code} <b>Diagnosis: </b>{ diagnoses?.find(d =>d.code === code)?.name} </List.Item>  \n        )}    </List> \n      </Table.Row>\n      )}\n         </Table.Body>\n         </Table>\n    </Container>\n    <AddEntryModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewEntry}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Entry</Button>\n    </div>\n  );\n} else {\n  return <div>{error}</div>;\n}\n};\n\nexport default OnePatientPage;","import React from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\n\nimport { apiBaseUrl } from \"./constants\";\nimport { useStateValue, setPatientList, setDiagnosisList } from \"./state\";\nimport { Patient, Diagnosis } from \"./types\";\n\nimport PatientListPage from \"./PatientListPage\";\nimport OnePatientPage from \"./OnePatientPage\";\n\nconst App: React.FC = () => {\n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    axios.get<void>(`${apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch(setPatientList(patientListFromApi));\n       // dispatch({ type: \"SET_PATIENT_LIST\", payload: patientListFromApi });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchPatientList();\n\n  const fetchDiagnosisList = async () => {\n    try {\n      const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(\n        `${apiBaseUrl}/diagnosis`\n      );\n      dispatch(setDiagnosisList(diagnosisListFromApi));\n     // dispatch({ type: \"SET_PATIENT_LIST\", payload: patientListFromApi });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  fetchDiagnosisList();\n}, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <Header as=\"h1\">Patientor</Header>\n          <Button as={Link} to=\"/\" primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path=\"/patients/:id\" render={() => <OnePatientPage />} />\n            <Route path=\"/\" render={() => <PatientListPage />} />\n          </Switch>\n\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}