{"version":3,"sources":["types.ts","constants.ts","state/reducer.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","OnePatientPage/index.tsx","App.tsx","index.tsx"],"names":["HealthCheckRating","Gender","apiBaseUrl","setPatientList","patientListFromApi","type","payload","addPatient","newPatient","initialState","patients","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","key","TextField","field","placeholder","style","color","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","a","axios","post","data","console","response","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","patient","id","Cell","to","OnePatientPage","useParams","setPatient","useEffect","find","p","get","then","updatePatient","log","entries","sex","Icon","entry","date","specialist","diagnosisCodes","description","App","fetchPatientList","Link","primary","Divider","hidden","path","render","ReactDOM","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.30e5838b.chunk.js","sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\ninterface BaseEntry { \n  id: string; \n  date: string; \n  specialist: string; \n  description: string; \n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\nexport interface OccupationalHealthCare extends BaseEntry { \n  type: \"OccupationalHealthcare\"; \n  employerName: string; \n  sickLeave?: SickLeave;\n}\n  \nexport interface Discharge { date: string; criteria: string;}\n\nexport interface HospitalEntry extends BaseEntry { \n  type: \"Hospital\"; \n  discharge: Discharge;\n}\n\nexport enum HealthCheckRating { \n  \"Healthy\" = 0, \n  \"LowRisk\" = 1, \n  \"HighRisk\" = 2, \n  \"CriticalRisk\" = 3}\n  \nexport interface HealthCheck extends BaseEntry { \n  type: \"HealthCheck\"; \n  healthCheckRating: HealthCheckRating;\n}\n\nexport enum Gender {\n  Male = \"male\",\n  Female = \"female\",\n  Other = \"other\"\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n  entries: Entry[];\n}\nexport interface SickLeave { \n  startDate: string; \n  endDate: string;\n}\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport type Entry = OccupationalHealthCare | HospitalEntry | HealthCheck;\n","export const apiBaseUrl = 'http://localhost:3001/api';\n","import { State } from \"./state\";\nimport { Patient, Entry } from \"../types\";\n\n\ntype SetPatientList = {\n  type: \"SET_PATIENT_LIST\";\n  payload: Patient[];\n};\n\ntype AddPatient = {\n  type: \"ADD_PATIENT\";\n  payload: Patient;\n};\n\ntype UpdatePatient = {\n  type: \"UPDATE_PATIENT\";\n  payload: Patient;\n};\n\nexport type Action = SetPatientList | AddPatient | UpdatePatient;\n\nexport const setPatientList = (patientListFromApi: Patient[]): Action => {\n  return {type: \"SET_PATIENT_LIST\", payload: patientListFromApi };\n};\n\nexport const updatePatient = (patient: Patient): Action => {\n  return { type: \"UPDATE_PATIENT\", payload: patient };\n};\nexport const addPatient = (newPatient: Patient): Action => {\n  return { type: \"ADD_PATIENT\", payload: newPatient };\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_PATIENT_LIST\":\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case \"UPDATE_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case \"ADD_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { Patient } from \"../types\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient };\n};\n\nconst initialState: State = {\n  patients: {}\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Table, Button } from \"semantic-ui-react\";\n\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\nimport AddPatientModal from \"../AddPatientModal\";\nimport { Patient } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport { useStateValue, addPatient } from \"../state\";\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n    //  dispatch({ type: \"ADD_PATIENT\", payload: newPatient });\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell><Link to = {`/patients/${patient.id}`}> {patient.name}</Link>\n               </Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { Container, Icon } from \"semantic-ui-react\";\nimport React, { useState, useEffect } from \"react\";\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\nimport AddPatientModal from \"../AddPatientModal\";\nimport { Patient, Entry } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport { useStateValue, updatePatient } from \"../state\";\n\nconst OnePatientPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n // const [, dispatch] = useStateValue();\n\n const [patient, setPatient] = useState<Patient | null>(null);\n  const [{ patients }, dispatch] = useStateValue();\n  const [error, setError] = React.useState<string | undefined>();\n  const [entries, setEntries] = React.useState<Entry[]>();\n  useEffect(() => {\n    const patient = Object.values(patients).find(p => p.id === id);\n    if (patient) {\n      if (!patient.ssn) {\n        axios.get<Patient>(\n          `${apiBaseUrl}/patients/${id}`\n        )\n        .then(response => {\n          dispatch(updatePatient(response.data));\n          setPatient(response.data);\n        });\n      } else {\n        setPatient(patient);\n      }\n    }\n  }, [patients]);\n \n\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n\n if(patient){\n   console.log(patient)\n   console.log(patient.entries)\n  let sex = \"\";\n  switch (patient.gender) {\n      case \"male\":\n          sex = \"man\";\n          break;\n      case \"female\":\n          sex = \"woman\";\n          break;\n      default:\n        sex = \"transgender\";\n          break;\n  }\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"left\">\n        <h2>{patient.name} \n       <Icon className={sex}/>\n        </h2>\n        <p>\n        <strong>SSN: </strong> {patient.ssn}\n         </p>\n         <p>\n        <strong>Date of Birth:</strong> {patient.dateOfBirth}\n         </p>\n         <p>\n        <strong>Occupation: </strong> {patient.occupation}\n        </p>\n        <p>\n        <strong>Entries: </strong> {patient.entries}\n        </p>\n    \n      {patient.entries.map(entry =>\n        <div key={entry.id} >\n          <p>{entry.type}</p>\n          <p>{entry.date}</p>\n          <p>{entry.specialist}</p>\n          <p>{entry.diagnosisCodes}</p>\n          <p>{entry.description}</p>\n          <p>{}</p>\n        </div>\n      )}\n    </Container>\n    </div>\n  );\n} else {\n  return <div>{error}</div>;\n}\n};\n\nexport default OnePatientPage;","import React from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\n\nimport { apiBaseUrl } from \"./constants\";\nimport { useStateValue, setPatientList } from \"./state\";\nimport { Patient } from \"./types\";\n\nimport PatientListPage from \"./PatientListPage\";\nimport OnePatientPage from \"./OnePatientPage\";\n\nconst App: React.FC = () => {\n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    axios.get<void>(`${apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch(setPatientList(patientListFromApi));\n       // dispatch({ type: \"SET_PATIENT_LIST\", payload: patientListFromApi });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchPatientList();\n  }, [dispatch]);\n\n  \n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <Header as=\"h1\">Patientor</Header>\n          <Button as={Link} to=\"/\" primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path=\"/patients/:id\" render={() => <OnePatientPage />} />\n            <Route path=\"/\" render={() => <PatientListPage />} />\n          </Switch>\n\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}