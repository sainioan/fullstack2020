{"version":3,"sources":["types.ts","constants.ts","state/reducer.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","AddEntryModal/AddEntryForm.tsx","AddEntryModal/index.tsx","OnePatientPage/index.tsx","App.tsx","index.tsx"],"names":["HealthCheckRating","Gender","apiBaseUrl","addEntry","patient","entry","type","payload","entries","concat","initialState","patients","diagnoses","Array","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","key","TextField","field","placeholder","style","color","NumberField","min","max","DiagnosisSelection","setFieldValue","setFieldTouched","stateOptions","diagnosis","code","text","Dropdown","fluid","multiple","search","selection","onChange","_event","data","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","a","axios","post","newPatient","console","response","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","id","Cell","to","AddHospitalEntryForm","date","specialist","description","diagnosisCodes","discharge","criteria","match","AddHealthCheckEntryForm","healthCheckRating","AddOccupationalEntryForm","employerName","sickLeave","startDate","endDate","isValidDate","AddEntryModal","setType","Group","class","content","OnePatientPage","useParams","setPatient","submitNewEntry","newEntry","window","alert","useEffect","find","p","get","then","updatePatient","sex","HospitalEntryType","Icon","size","OccupationalHealthcareEntryType","TableCell","HealthCheckEntryType","EntryDetails","Error","assertNever","i","padding","List","bulleted","Item","d","App","patientListFromApi","fetchPatientList","diagnosisListFromApi","fetchDiagnosisList","Link","primary","Divider","hidden","path","render","ReactDOM","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.b8fa48bf.chunk.js","sourcesContent":["\nexport interface BaseEntry { \n  id: string; \n  date: string; \n  specialist: string; \n  description: string; \n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\n\nexport interface OccupationalHealthCare extends BaseEntry { \n  type: \"OccupationalHealthcare\"; \n  employerName: string; \n  sickLeave?: SickLeave;\n}\n  \nexport interface Discharge { \n  date: string; \n  criteria: string;\n}\n\nexport interface HospitalEntry extends BaseEntry { \n  type: \"Hospital\"; \n  discharge: Discharge;\n}\n\nexport enum HealthCheckRating { \n  \"Healthy\" = 0, \n  \"LowRisk\" = 1, \n  \"HighRisk\" = 2, \n  \"CriticalRisk\" = 3}\n  \nexport interface HealthCheck extends BaseEntry { \n  type: \"HealthCheck\"; \n  healthCheckRating: HealthCheckRating;\n}\n\nexport type Entry = OccupationalHealthCare | HospitalEntry | HealthCheck;\nexport enum Gender {\n  Male = \"male\",\n  Female = \"female\",\n  Other = \"other\"\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n  entries: Entry[];\n}\nexport interface SickLeave { \n  startDate: string; \n  endDate: string;\n}\n","export const apiBaseUrl = 'http://localhost:3001/api';\n","import { State } from './state';\nimport { Patient, Diagnosis, Entry} from '../types';\n\nexport type Action =\n  | {\n      type: \"SET_PATIENT_LIST\";\n      payload: Patient[];\n    }\n  | {\n      type: \"ADD_PATIENT\";\n      payload: Patient;\n    }\n  | {\n      type: \"UPDATE_PATIENT\";\n      payload: Patient;\n    }\n  | {\n      type: \"SET_DIAGNOSES\";\n      payload: Diagnosis[];\n\t};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_PATIENT_LIST\":\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case \"ADD_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case \"UPDATE_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case \"SET_DIAGNOSES\":\n      return {\n        ...state,\n        diagnoses: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n\nexport const setPatientList = (list: Patient[]): Action => {\n  return { type: \"SET_PATIENT_LIST\", payload: list };\n};\n\nexport const addPatient = (patient: Patient): Action => {\n  return { type: \"ADD_PATIENT\", payload: patient };\n};\n\nexport const updatePatient = (patient: Patient): Action => {\n  return { type: \"UPDATE_PATIENT\", payload: patient };\n};\n\nexport const setDiagnosisList = (list: Diagnosis[]): Action => {\n  return { type: \"SET_DIAGNOSES\", payload: list};\n};\n/* export const addEntry = (newEntry: Entry): Action => {\n\treturn {\n\t\ttype: 'ADD_ENTRY',\n\t\tpayload: newEntry,\n\t};\n}; */\nexport const addEntry = (patient: Patient, entry: Entry): Action => {\n  return { type: \"UPDATE_PATIENT\", payload: { ...patient, entries: patient.entries.concat(entry) } };\n};","import React, { createContext, useContext, useReducer } from \"react\";\nimport { Patient, Diagnosis } from \"../types\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  diagnoses: Diagnosis[];\n};\n\nconst initialState: State = {\n  patients: {},\n  diagnoses: new Array<Diagnosis>(),\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Table, Button } from \"semantic-ui-react\";\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\nimport AddPatientModal from \"../AddPatientModal\";\nimport { Patient } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport { useStateValue, addPatient } from \"../state\";\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n    //  dispatch({ type: \"ADD_PATIENT\", payload: newPatient });\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell><Link to = {`/patients/${patient.id}`}> {patient.name}</Link>\n               </Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import React from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { useStateValue } from \"../state\";\nimport { TextField, DiagnosisSelection, NumberField } from \"../AddPatientModal/FormField\";\nimport {  HealthCheck, HospitalEntry, OccupationalHealthCare } from \"../types\";\nimport { Grid, Button } from \"semantic-ui-react\";\n\n/*\n * use type HospitalEntry, HealthCheck, or Occupational HealthCare, but omit id,\n * because those are irrelevant for new entry object.\n */\n\nexport type HospitalEntryFormValues = Omit<HospitalEntry, \"id\">;\nexport type HealthCheckEntryFormValues = Omit<HealthCheck, \"id\">;\nexport type OccupationalHealthCareEntryFormValues = Omit<OccupationalHealthCare, \"id\">;\n\ninterface HospitalProps {\n    onSubmit: (values: HospitalEntryFormValues) => void;\n    onCancel: () => void;\n}\n\ninterface HealthCheckProps {\n    onSubmit: (values: HealthCheckEntryFormValues) => void;\n    onCancel: () => void;\n}\n\ninterface OccupationalHealthCareProps {\n    onSubmit: (values: OccupationalHealthCareEntryFormValues) => void;\n    onCancel: () => void;\n}\n  \n  export const AddHospitalEntryForm: React.FC<HospitalProps> = ({ onSubmit, onCancel }) => {\n    const [{ diagnoses }] = useStateValue();\n    return (\n      <Formik\n        initialValues={{\n            date: \"\",\n            specialist: \"\",\n            description: \"\",\n            diagnosisCodes: [],\n            discharge: {\n                date: \"\",\n                criteria: \"\"\n              },\n            type: \"Hospital\",\n        }}\n        onSubmit={onSubmit}\n        validate={values => {\n          const requiredError = \"Field is required\";\n          const formattingError = \"Date formatting error\";\n          const errors: { [field: string]: string } = {};\n          function isValidDate(date:string) {\n            let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\n            return date.match(regEx) != null;\n          }\n          if (!values.date){\n            errors.date = requiredError;\n          }\n            if(!isValidDate(values.date)) {\n           errors.date = formattingError; \n          }\n          if (!values.specialist) {\n            errors.specialist = requiredError;\n          }\n          if (!values.discharge.date || !values.discharge.criteria) {\n            errors.date = requiredError;\n            errors.criteria = requiredError;\n          }\n          if (!values.description) {\n            errors.description = requiredError;\n          }\n          return errors;\n        }}\n      >\n        {({ isValid, dirty, setFieldValue, setFieldTouched  }) => {\n          return (\n            <Form className=\"form ui\">\n             <Field\n                label=\"Type\"\n                placeholder=\"type\"\n                name=\"type\"\n                component={TextField}\n              />\n              <Field\n                label=\"Date\"\n                placeholder=\"YYYY-MM-DD\"\n                name=\"date\"\n                component={TextField}\n              />\n              <Field\n                label=\"Specialist\"\n                placeholder=\"specialist\"\n                name=\"specialist\"\n                component={TextField}\n              />         \n              <Field\n              label=\"Discharge Date\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"discharge.date\"\n              component={TextField}\n            />\n            <Field\n              label=\"Discharge Criteria\"\n              placeholder=\"Criteria\"\n              name=\"discharge.criteria\"\n              component={TextField}\n            />\n              <Field\n                label=\"Description\"\n                placeholder=\"Description\"\n                name=\"description\"\n                component={TextField}\n              />     \n               <DiagnosisSelection\n              diagnoses={diagnoses}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            />\n              <Grid>\n                <Grid.Column floated=\"left\" width={5}>\n                  <Button type=\"button\" onClick={onCancel} color=\"red\">\n                    Cancel\n                  </Button>\n                </Grid.Column>\n                <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n                </Grid.Column>\n              </Grid>\n            </Form>\n          );\n        }}\n      </Formik>\n    );\n  };\n\n  export const AddHealthCheckEntryForm: React.FC<HealthCheckProps> = ({ onSubmit, onCancel }) => {\n    const [{ diagnoses }] = useStateValue();\n    return (\n      <Formik\n        initialValues={{\n            date: \"\",\n            specialist: \"\",\n            description: \"\",\n            diagnosisCodes: [],\n            healthCheckRating:3,\n            type: \"HealthCheck\",\n        }}\n        onSubmit={onSubmit}\n        validate={values => {\n          const requiredError = \"Field is required\";\n          const formattingError = \"Date formatting error\";\n          const errors: { [field: string]: string } = {};\n          function isValidDate(date:string) {\n            var regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\n            return date.match(regEx) != null;\n          }\n          if (!values.date){\n            errors.date = requiredError;\n          }\n            if(!isValidDate(values.date)) {\n           errors.date = formattingError;\n            \n          }\n       \n          if (!values.specialist) {\n            errors.specialist = requiredError;\n          }\n          if (!values.healthCheckRating) {\n            errors.healthCheckRating = requiredError;\n          }\n          if (!values.description) {\n            errors.description = requiredError;\n          }\n          return errors;\n        }}\n      >\n        {({ isValid, dirty, setFieldValue, setFieldTouched  }) => {\n          return (\n            <Form className=\"form ui\">\n             <Field\n                label=\"Type\"\n                placeholder=\"type\"\n                name=\"type\"\n                component={TextField}\n              />\n              <Field\n                label=\"Date\"\n                placeholder=\"YYYY-MM-DD\"\n                name=\"date\"\n                component={TextField}\n              />\n              <Field\n                label=\"Specialist\"\n                placeholder=\"specialist\"\n                name=\"specialist\"\n                component={TextField}\n              />         \n            <Field\n                label=\"healthCheckRating\"\n                name=\"healthCheckRating\"\n                component={NumberField}\n                min={0}\n                max={3}\n            />\n              <Field\n                label=\"Description\"\n                placeholder=\"Description\"\n                name=\"description\"\n                component={TextField}\n              />     \n               <DiagnosisSelection\n              diagnoses={diagnoses}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            />\n              <Grid>\n                <Grid.Column floated=\"left\" width={5}>\n                  <Button type=\"button\" onClick={onCancel} color=\"red\">\n                    Cancel\n                  </Button>\n                </Grid.Column>\n                <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n                </Grid.Column>\n              </Grid>\n            </Form>\n          );\n        }}\n      </Formik>\n    );\n  };\n  export const AddOccupationalEntryForm: React.FC<OccupationalHealthCareProps > = ({ onSubmit, onCancel }) => {\n    const [{ diagnoses }] = useStateValue();\n    return (\n      <Formik\n        initialValues={{\n            date: \"\",\n            specialist: \"\",\n            description: \"\",\n            diagnosisCodes: [],\n            employerName: \"\",\n            sickLeave: {\n                startDate: \"\",\n                endDate: \"\"\n            },\n            type: \"OccupationalHealthcare\",\n        }}\n        onSubmit={onSubmit}\n        validate={values => {\n          const requiredError = \"Field is required\";\n          const formattingError = \"Date formatting error\";\n          const errors: { [field: string]: string } = {};\n          function isValidDate(date:string) {\n            var regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\n            return date.match(regEx) != null;\n          }\n          if (!values.date) {\n          errors.date = requiredError;\n          }\n          if (!isValidDate(values.date)) {\n            errors.date = formattingError;\n          }\n          if (!values.specialist) {\n            errors.specialist = requiredError;\n          }\n          if (!values.employerName) {\n            errors.employerName = requiredError;\n          }\n\n          if (!values.description) {\n            errors.description = requiredError;\n          }\n          if (values.sickLeave){\n          if(!isValidDate(values.sickLeave.startDate)|| !isValidDate(values.sickLeave.endDate))\n          errors.sickLeave = formattingError; \n          }\n          return errors;\n        }}\n      >\n        {({ isValid, dirty, setFieldValue, setFieldTouched  }) => {\n          return (\n            <Form className=\"form ui\">\n             <Field\n                label=\"Type\"\n                placeholder=\"type\"\n                name=\"type\"\n                component={TextField}\n              />\n              <Field\n                label=\"Date\"\n                placeholder=\"YYYY-MM-DD\"\n                name=\"date\"\n                component={TextField}\n              />\n              <Field\n                label=\"Specialist\"\n                placeholder=\"specialist\"\n                name=\"specialist\"\n                component={TextField}\n              />         \n              <Field\n                label=\"Description\"\n                placeholder=\"Description\"\n                name=\"description\"\n                component={TextField}\n              />    \n                <Field\n                label=\"Employer Name\"\n                placeholder=\"Employer Name\"\n                name=\"employerName\"\n                component={TextField}\n              />         \n              <Field\n              label=\"Sick Leave Start Date\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"sickLeave.startDate\"\n              component={TextField}\n            />\n            <Field\n              label=\"Sick Leave End Date\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"sickLeave.endDate\"\n              component={TextField}\n            />\n               <DiagnosisSelection\n              diagnoses={diagnoses}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            />\n              <Grid>\n                <Grid.Column floated=\"left\" width={5}>\n                  <Button type=\"button\" onClick={onCancel} color=\"red\">\n                    Cancel\n                  </Button>\n                </Grid.Column>\n                <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n                </Grid.Column>\n              </Grid>\n            </Form>\n          );\n        }}\n      </Formik>\n    );\n  };\n","import { Modal, Segment, Button } from 'semantic-ui-react';\nimport { AddHospitalEntryForm, AddHealthCheckEntryForm,AddOccupationalEntryForm, HospitalEntryFormValues, HealthCheckEntryFormValues, OccupationalHealthCareEntryFormValues } from './AddEntryForm';\nimport React, {useState} from 'react';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: HospitalEntryFormValues|HealthCheckEntryFormValues|OccupationalHealthCareEntryFormValues ) => void;\n  error?: string;\n}\n\nconst AddEntryModal = ({ modalOpen, onClose, onSubmit, error }: Props) => {\n    const [ type, setType ] = useState<\"Hospital\" | \"HealthCheck\" | \"OccupationalHealthcare\">(\"Hospital\");\n    \n    \nreturn (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new entry</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <Button.Group>\n      \n        <Button \n          class=\"ui teal basic button\"\n          content=\"Health Check\"\n          color={type === \"HealthCheck\" ? \"twitter\" : undefined}\n          onClick={() => setType(\"HealthCheck\")}  \n        />\n        <Button \n          class=\"ui teal basic button\"\n          content=\"Occupational Healthcare\"\n          color={type === \"OccupationalHealthcare\" ? \"facebook\" : undefined}\n          onClick={() => setType(\"OccupationalHealthcare\")}        \n        />  <Button \n        class=\"ui teal basic button\"\n        content=\"Hospital\" \n        color={type === \"Hospital\" ? \"instagram\" : undefined}\n        onClick={() => setType(\"Hospital\")} \n      />\n      </Button.Group>\n      {type === \"Hospital\" ? <AddHospitalEntryForm onSubmit={onSubmit} onCancel={onClose} />\n      : type === \"HealthCheck\" ? <AddHealthCheckEntryForm onSubmit={onSubmit} onCancel={onClose} />\n      :<AddOccupationalEntryForm onSubmit={onSubmit} onCancel={onClose} />}\n    </Modal.Content>\n  </Modal>\n);\n};\n\n\nexport default AddEntryModal;","import axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { Container, Icon, Table, TableCell, List, Segment, Button} from \"semantic-ui-react\";\nimport React, { useState, useEffect } from \"react\";\nimport { HospitalEntryFormValues, HealthCheckEntryFormValues,OccupationalHealthCareEntryFormValues } from \"../AddEntryModal/AddEntryForm\";\nimport AddEntryModal from \"../AddEntryModal\";\nimport { HospitalEntry, Patient, Entry, OccupationalHealthCare, HealthCheck } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport { useStateValue, updatePatient, addEntry } from \"../state\";\n\nconst OnePatientPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n // const [, dispatch] = useStateValue();\n\n const [patient, setPatient] = useState<Patient | null>(null);\n  const [{ patients, diagnoses }, dispatch] = useStateValue();\n  const [error, setError] = React.useState<string | undefined>();\n  //const [entries, setEntries] = React.useState<Entry[]>();\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n  const submitNewEntry = async (values: HospitalEntryFormValues|HealthCheckEntryFormValues|OccupationalHealthCareEntryFormValues ) => {\n    try {  \n      if (patient) {\n\n      const { data: newEntry } = await axios.post<Entry>(\n        `${apiBaseUrl}/patients/${patient.id}/entries`,\n        values\n      );\n      closeModal();\n      dispatch(addEntry(patient, newEntry));\n      }\n  \n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n      window.alert(e.response.data);\n    }\n  };\n  useEffect(() => {\n    const patient = Object.values(patients).find(p => p.id === id);\n    if (patient) {\n      if (!patient.ssn) {\n        axios.get<Patient>(\n          `${apiBaseUrl}/patients/${id}`\n        )\n        .then(response => {\n          dispatch(updatePatient(response.data));\n          setPatient(response.data);\n\t\t\t//\tsetEntries(response.data.entries);\n        });\n      } else {\n        setPatient(patient);\n      }\n    }\n  }, [patients, dispatch, id]);\n \n \n if(patient){  \n  \n  let sex = \"\";\n  switch (patient.gender) {\n      case \"male\":\n          sex = \"man\";\n          break;\n      case \"female\":\n          sex = \"woman\";\n          break;\n      default:\n        sex = \"transgender\";\n          break;\n  }\n\n  const HospitalEntryType: React.FC<{ entry: HospitalEntry }> = ({ entry }) => {\n  return (\n    <Segment>\n      Hospital Entry <Icon className =\"hospital outline icon\"  size=\"large\"/>\n      <Table.Row>Reason for Hospital Discharge : {entry.discharge.criteria} </Table.Row>\n      <Table.Row>Date of Discharge: {entry.discharge.date}</Table.Row>\n    </Segment>\n  );\n  }; \n  const OccupationalHealthcareEntryType: React.FC<{ entry: OccupationalHealthCare}> = ({ entry }) => {\n    if(entry.sickLeave){\n return (\n   <Segment>\n     Occupational Healthcare\n  <Icon className =\"user md icon\"  size=\"large\"/>\n  <TableCell>Employer: {entry.employerName}</TableCell>\n  <TableCell>Sick leave: START: {entry.sickLeave.startDate} END: {entry.sickLeave.endDate}</TableCell>\n  </Segment>\n  );\n    } else {\n      return (\n        <Segment>\n          Occupational Healthcare\n       <Icon className =\"user md icon\"  size=\"large\"/>\n       <Table.Row> Employer: {entry.employerName}</Table.Row>\n       </Segment>\n       );\n    }\n \n\n  };\n  const  HealthCheckEntryType: React.FC<{ entry:  HealthCheck}> = ({ entry }) => {\n    const HealthCheckRating: React.FC<{ entry: HealthCheck }> = ({ entry }) => {\n      switch (entry.healthCheckRating) {\n        case 0:\n          return <Icon color=\"green\" className=\"heart\" />;\n        case 1:\n          return <Icon color=\"yellow\" className=\"heart\" />;\n        case 2:\n          return <Icon color=\"teal\" className=\"heart\" />;\n        case 3:\n          return <Icon color=\"red\" className=\"heart\" />;\n        default:\n          return <div></div>;\n      }\n    };\n return (\n   <Segment>\n     Health Check-up\n  <Icon className =\"stethoscope icon\" size=\"large\"  />\n  <HealthCheckRating entry={entry} />\n </Segment>\n );\n  };\n\n  const EntryDetails: React.FC<{ entry: Entry }> = ({ entry }) => {\n    const assertNever = (value: never): never => {\n      throw new Error(\n        `error, 'value: ${value} not defined`\n      );\n    };\n  \n    switch (entry.type) {\n      case \"Hospital\":\n        return <HospitalEntryType entry={entry} />;\n      case \"OccupationalHealthcare\":\n        return <OccupationalHealthcareEntryType entry={entry} />;\n      case \"HealthCheck\":\n        return <HealthCheckEntryType entry={entry} />;\n      default:\n        return assertNever(entry);\n    }\n  };\n  return (\n    <div>\n      <Container textAlign=\"left\" >\n        <h2>{patient.name} \n       <Icon className={sex}/>\n        </h2>\n        <p>\n        <strong>SSN: </strong> {patient.ssn}\n         </p>\n         <p>\n        <strong>Date of Birth:</strong> {patient.dateOfBirth}\n         </p>\n         <p>\n        <strong>Occupation: </strong> {patient.occupation}\n        </p>\n        <h3>Entries: </h3> \n        <Table celled >\n        <Table.Body>\n      {patient.entries.map((entry,i )=>\n      <Table.Row key={entry.id}>\n        {i + 1}\n       <TableCell style={{ padding: \"10px\" }}> <b>Entry date:</b> {entry.date}   <EntryDetails  entry={entry}/>   </TableCell>  \n      <TableCell> <strong>Description:</strong> {entry.description}</TableCell>  \n       <List bulleted> {entry.diagnosisCodes?.map(code => \n      <List.Item  key = {code} style={{ padding: \"10px\" }}> <b>Diagnosis code: </b>{code} <b>Diagnosis: </b>{ diagnoses?.find(d =>d.code === code)?.name} </List.Item>  \n        )}    </List> \n      </Table.Row>\n      )}\n         </Table.Body>\n         </Table>\n    </Container>\n    <AddEntryModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewEntry}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Entry</Button>\n    </div>\n  );\n} else {\n  return <div>{error}</div>;\n}\n};\n\nexport default OnePatientPage;","import React from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\n\nimport { apiBaseUrl } from \"./constants\";\nimport { useStateValue, setPatientList, setDiagnosisList } from \"./state\";\nimport { Patient, Diagnosis } from \"./types\";\n\nimport PatientListPage from \"./PatientListPage\";\nimport OnePatientPage from \"./OnePatientPage\";\n\nconst App: React.FC = () => {\n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    axios.get<void>(`${apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch(setPatientList(patientListFromApi));\n       // dispatch({ type: \"SET_PATIENT_LIST\", payload: patientListFromApi });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchPatientList();\n\n  const fetchDiagnosisList = async () => {\n    try {\n      const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(\n        `${apiBaseUrl}/diagnosis`\n      );\n      dispatch(setDiagnosisList(diagnosisListFromApi));\n     // dispatch({ type: \"SET_PATIENT_LIST\", payload: patientListFromApi });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  fetchDiagnosisList();\n}, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <Header as=\"h1\">Patientor</Header>\n          <Button as={Link} to=\"/\" primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path=\"/patients/:id\" render={() => <OnePatientPage />} />\n            <Route path=\"/\" render={() => <PatientListPage />} />\n          </Switch>\n\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}